///////////////////////////////////////////////////////////////////////
// SemiExpression.cpp - collect tokens for analysis                  //
// ver 3.1                                                           //
// Language:    C++, Visual Studio 2015                              //
// Application: Parser component, CSE687 - Object Oriented Design    //
// Author:      Jim Fawcett, Syracuse University, CST 4-187          //
//              jfawcett@twcny.rr.com                                //
///////////////////////////////////////////////////////////////////////

#include <fstream>
#include <iostream>
#include <string>
#include <unordered_map>
#include <exception>
#include "SemiExp.h"
#include "../Tokenizer/Tokenizer.h"

using namespace Scanner;

SemiExp::SemiExp(Toker* pToker) : _pToker(pToker) {}

bool SemiExp::get()
{
  if (_pToker == nullptr)
    throw(std::logic_error("no Toker reference"));
  _tokens.clear();
  int flag = 0;
  int flag2 = 0;
  
  while (true)
  {
    std::string token = _pToker->getTok();
    if (token == "")
      break;
    _tokens.push_back(token);
    
    if (token == "{")
      return true;
	if (token == ";")
		return true;
	if (token == "}")
		return true;
	if (token == "#")
		flag = 1;
	if (token == "\n" && flag == 1)
		return true;
	if (token == "public" || token == "protected" || token == "private")
		flag2 = 1;
	if (token == ":" && flag2 == 1)
		return true;
  }
  return false;
}


Token SemiExp::operator[](size_t n)
{
  if (n < 0 || n >= _tokens.size())
    throw(std::invalid_argument("index out of range"));
  return _tokens[n];
}

size_t SemiExp::length()
{
  return _tokens.size();
}

size_t SemiExp::find(const std::string& tok)
{
	for (size_t i = 0; i<length(); ++i)
		if (tok == _tokens[i])
			return i;
	return length();
}

bool SemiExp::remove(const std::string& tok)
{
	std::vector<std::string>::iterator it;
	it = std::find(_tokens.begin(), _tokens.end(), tok);
	if (it != _tokens.end())
	{
		_tokens.erase(it);
		return true;
	}
	return false;
}
//----< remove tok at specified indes >------------------------

bool SemiExp::remove(size_t i)
{
	if (i<0 || _tokens.size() <= i)
		return false;
	std::vector<std::string>::iterator it = _tokens.begin();
	_tokens.erase(it + i);
	return true;
}

void SemiExp::toLower()
{
	for (size_t i = 0; i<length(); ++i)
	{
		for (size_t j = 0; j<(*this)[i].length(); ++j)
		{
			(*this)[i][j] = tolower((*this)[i][j]);
		}
	}
}

void SemiExp::trimFront()
{
	while (_tokens.size() > 0 && (_tokens[0] == "\n" || _tokens[0] == ""))
		remove(0);
}

bool SemiExp::merge(const std::string& firstTok, const std::string& secondTok)
{
	size_t first = find(firstTok);
	size_t second = find(secondTok);
	if (first < length() && second < length())
	{
		for (size_t i = first + 1; i<second; ++i)
			(*this)[first] += (*this)[i];
		for (size_t i = first + 1; i<second; ++i)
			remove(first + 1);
		return true;
	}
	return false;
}

void SemiExp::show()
{
  std::cout << "\n  ";
  for (auto token : _tokens)
    if(token != "\n")
      std::cout << token << " ";
  std::cout << "\n";
}

int main()
{
  Toker toker;
  //std::string fileSpec = "../Tokenizer/Tokenizer.cpp";
  std::string fileSpec = "../Tokenizer/Test.txt";

  std::fstream in(fileSpec);
  if (!in.good())
  {
    std::cout << "\n  can't open file " << fileSpec << "\n\n";
    return 1;
  }
  toker.attach(&in);

  SemiExp semi(&toker);
  while(semi.get())
  {
    std::cout << "\n  -- semiExpression --";
    semi.show();
  } 
  /*
     May have collected tokens, but reached end of stream
     before finding SemiExp terminator.
   */
  if (semi.length() > 0)
  {
    std::cout << "\n  -- semiExpression --";
    semi.show();
    std::cout << "\n\n";
  }
  return 0;
}